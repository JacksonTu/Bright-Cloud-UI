
#user  nobody;
#Nginx进程数, 建议设置为等于CPU总核心数
worker_processes  12;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;

# 配置Nginx worker进程最大打开文件数
worker_rlimit_nofile 65535;

events {
    # windows下需要注释掉
    # use epoll;
    # 单个进程允许的客户端最大连接数
    worker_connections  20480;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip压缩 gzip压缩可以配置http,server和location模块下
    gzip on;
    #压缩协议版本
    #gzip_http_version 1.1;
    #gzip压缩最小文件大小
    gzip_min_length 1k;
    #缓冲
    gzip_buffers 4 16k;
    #压缩级别，1-10，数字越大压缩的越好，时间也越长
    gzip_comp_level 9;
    #压缩的文件类型
    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
    #跟Squid等缓存服务有关，on的话会在Header里增加"Vary: Accept-Encoding"
    gzip_vary on;
    #IE6对Gzip不怎么友好，不给它Gzip压缩
    gzip_disable "MSIE [1-6]\.";
    # Nginx作为反向代理的时候启用，开启或者关闭后端服务器返回的结果，匹配的前提是后端服务器必须要返回包含"Via"的 header头。
    # off - 关闭所有的代理结果数据的压缩
    # expired - 启用压缩，如果header头中包含 "Expires" 头信息
    # no-cache - 启用压缩，如果header头中包含 "Cache-Control:no-cache" 头信息
    # no-store - 启用压缩，如果header头中包含 "Cache-Control:no-store" 头信息
    # private - 启用压缩，如果header头中包含 "Cache-Control:private" 头信息
    # no_last_modified - 启用压缩,如果header头中不包含 "Last-Modified" 头信息
    # no_etag - 启用压缩 ,如果header头中不包含 "ETag" 头信息
    # auth - 启用压缩 , 如果header头中包含 "Authorization" 头信息
    # any - 无条件启用压缩
    gzip_proxied expired no-cache no-store private auth;

    #缓存配置
    proxy_cache_path proxy_cache levels=1:2 keys_zone=xyworld_cache:10m max_size=1g inactive=60m use_temp_path=off;

    # 设定负载均衡
    upstream bright_backend {
        ip_hash;
        server 172.16.5.84:8100;
        server 172.16.5.84:8100;
    }

    server {
        listen       8100;
        server_name  localhost;

        charset  utf-8;

        location / {
            root   /home/tomcat/dist_bright;

            index  index.html index.htm;
            # 用于配合 browserHistory使用
            try_files $uri $uri/ /index.html;
        }

        # 代理
        location ^~ /api/ {
          proxy_pass http://172.16.5.84:8002/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $remote_addr;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          proxy_set_header User-Agent $http_user_agent;
          proxy_set_header authorization $http_authorization;
        }
        # 代理websocket
        location ^~ /ws/ {
			    proxy_pass http://172.16.5.84:8004/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $remote_addr;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
          proxy_set_header User-Agent $http_user_agent;
          proxy_set_header authorization $http_authorization;

          proxy_cache xyworld_cache;
          proxy_cache_key $scheme$proxy_host$request_uri;

		    }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }



